{"version":3,"sources":["api/axios.ts","api/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["baseURL","instance","axios","create","timeout","interceptors","response","use","data","success","message","antMessage","error","Promise","reject","inquiry","params","url","post","columns","title","dataIndex","key","App","Form","useForm","form","useState","dataSource","setDataSource","onFinish","a","name","phone","startDate","endDate","moment","isMoment","format","Date","toISOString","res","map","item","date","className","accept","action","onChange","info","console","log","file","status","onClick","window","open","layout","size","Item","label","placeholder","type","htmlType","style","marginLeft","resetFields","marginTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2c6993d3.chunk.js","sourcesContent":["import axios from 'axios';\nimport { message as antMessage } from 'antd';\n\nexport const baseURL = 'http://49.235.149.160:2333/';\n// export const baseURL = 'http://127.0.0.1/';\n\nconst instance = axios.create({\n  baseURL,\n  timeout: 10000,\n});\n\ninstance.interceptors.response.use(function (response) {\n  const { success, message, data } = response.data;\n  if (!success) {\n    antMessage.error(message);\n    return Promise.reject(message);\n  }\n  return data;\n});\n\nexport const post = (url: string, params?: object) => instance.post(url, params);\n","import { post } from './axios';\n\nexport interface IInquiryParams {\n    name?: string;\n    phone?: string;\n    startDate?: string;\n    endDate?: string;\n}\n\nexport const inquiry = (params: IInquiryParams) => post('inquiry', params);\n","import React, { useState } from 'react';\nimport { Form, Input, DatePicker, Button, Upload, message, Table } from 'antd';\nimport moment from 'moment';\nimport { baseURL } from './api/axios';\nimport { inquiry, IInquiryParams } from './api';\nimport './App.css';\n\nconst dateFormat = 'YYYY-MM-DD';\ninterface IColumn {\n    id: number,\n    name: string,\n    phone: string,\n    date: string\n}\nconst columns = [\n    {\n        title: '客户姓名',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        title: '客户手机号',\n        dataIndex: 'phone',\n        key: 'phone',\n    },\n    {\n        title: '上传时间',\n        dataIndex: 'date',\n        key: 'date',\n    },\n]\n\nconst App = () => {\n    const [form] = Form.useForm();\n    const [dataSource, setDataSource] = useState([] as IColumn[]);\n    const onFinish = async ({ \n        name = '', \n        phone = '',\n        startDate, \n        endDate\n    }: IInquiryParams) => {\n        startDate = moment.isMoment(startDate) ? startDate.format(dateFormat) + ' 00:00' : new Date('1900-01-01').toISOString();\n        endDate =  moment.isMoment(endDate) ? endDate.format(dateFormat) + ' 23:59' : new Date('2077-01-01').toISOString();\n        const res = await inquiry({ name, phone, startDate, endDate });\n        setDataSource((res as any).map((item: any) => ({ ...item, date: moment(item.date).format('YYYY-MM-DD HH:mm:ss') })));\n    }\n\n    return (\n        <div className='container'>\n            <div className='menu'>\n                <div className='admin'>Admin Pro</div>\n                <div>数据管理</div>\n            </div>\n            <div className='content'>\n                <div className='row'>\n                    <Upload\n                        accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                        action={`${baseURL}upload`}\n                        onChange={(info) => {\n                            console.log(info);\n                            const { status, response } = info.file;\n                            if (status === 'done') {\n                                message.success(`上传${response.success ? '成功' : '失败'}！`);\n                            } else if (status === 'error') {\n                                message.error('上传失败！');\n                            }\n                        }}\n                    >\n                        <Button>导入数据</Button>\n                    </Upload>\n                    <span className='download' onClick={() => window.open(`${baseURL}download`)}>模板下载</span>\n                </div>\n                <Form form={form} layout='inline' size='large' onFinish={onFinish}>\n                    <Form.Item name='name' label='姓名'>\n                        <Input placeholder='请输入姓名' />\n                    </Form.Item>\n                    <Form.Item name='phone' label='手机号'>\n                        <Input placeholder='请输入手机号码' />\n                    </Form.Item>\n                    <Form.Item name='startDate'>\n                        <DatePicker format={dateFormat} placeholder={'上传开始时间'} />\n                    </Form.Item>\n                    <div className='link'><span>-</span></div>\n                    <Form.Item name='endDate'>\n                        <DatePicker format={dateFormat} placeholder={'上传截止时间'} />\n                    </Form.Item>\n                    <Button type='primary' htmlType='submit'>查询</Button>\n                    <Button style={{ marginLeft: 20 }} onClick={() => form.resetFields()}>清空</Button>\n                </Form>\n                <Table style={{ marginTop: 20 }} dataSource={dataSource} columns={columns} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}